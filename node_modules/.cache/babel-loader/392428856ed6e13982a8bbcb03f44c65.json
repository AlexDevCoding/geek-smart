{"ast":null,"code":"import { TinyColor } from '@ctrl/tinycolor';\nexport default function genColorMapToken(seed, _ref) {\n  let {\n    generateColorPalettes,\n    generateNeutralColorPalettes\n  } = _ref;\n  const {\n    colorSuccess: colorSuccessBase,\n    colorWarning: colorWarningBase,\n    colorError: colorErrorBase,\n    colorInfo: colorInfoBase,\n    colorPrimary: colorPrimaryBase,\n    colorBgBase,\n    colorTextBase\n  } = seed;\n  const primaryColors = generateColorPalettes(colorPrimaryBase);\n  const successColors = generateColorPalettes(colorSuccessBase);\n  const warningColors = generateColorPalettes(colorWarningBase);\n  const errorColors = generateColorPalettes(colorErrorBase);\n  const infoColors = generateColorPalettes(colorInfoBase);\n  const neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase); // Color Link\n\n  const colorLink = seed.colorLink || seed.colorInfo;\n  const linkColors = generateColorPalettes(colorLink);\n  return Object.assign(Object.assign({}, neutralColors), {\n    colorPrimaryBg: primaryColors[1],\n    colorPrimaryBgHover: primaryColors[2],\n    colorPrimaryBorder: primaryColors[3],\n    colorPrimaryBorderHover: primaryColors[4],\n    colorPrimaryHover: primaryColors[5],\n    colorPrimary: primaryColors[6],\n    colorPrimaryActive: primaryColors[7],\n    colorPrimaryTextHover: primaryColors[8],\n    colorPrimaryText: primaryColors[9],\n    colorPrimaryTextActive: primaryColors[10],\n    colorSuccessBg: successColors[1],\n    colorSuccessBgHover: successColors[2],\n    colorSuccessBorder: successColors[3],\n    colorSuccessBorderHover: successColors[4],\n    colorSuccessHover: successColors[4],\n    colorSuccess: successColors[6],\n    colorSuccessActive: successColors[7],\n    colorSuccessTextHover: successColors[8],\n    colorSuccessText: successColors[9],\n    colorSuccessTextActive: successColors[10],\n    colorErrorBg: errorColors[1],\n    colorErrorBgHover: errorColors[2],\n    colorErrorBgActive: errorColors[3],\n    colorErrorBorder: errorColors[3],\n    colorErrorBorderHover: errorColors[4],\n    colorErrorHover: errorColors[5],\n    colorError: errorColors[6],\n    colorErrorActive: errorColors[7],\n    colorErrorTextHover: errorColors[8],\n    colorErrorText: errorColors[9],\n    colorErrorTextActive: errorColors[10],\n    colorWarningBg: warningColors[1],\n    colorWarningBgHover: warningColors[2],\n    colorWarningBorder: warningColors[3],\n    colorWarningBorderHover: warningColors[4],\n    colorWarningHover: warningColors[4],\n    colorWarning: warningColors[6],\n    colorWarningActive: warningColors[7],\n    colorWarningTextHover: warningColors[8],\n    colorWarningText: warningColors[9],\n    colorWarningTextActive: warningColors[10],\n    colorInfoBg: infoColors[1],\n    colorInfoBgHover: infoColors[2],\n    colorInfoBorder: infoColors[3],\n    colorInfoBorderHover: infoColors[4],\n    colorInfoHover: infoColors[4],\n    colorInfo: infoColors[6],\n    colorInfoActive: infoColors[7],\n    colorInfoTextHover: infoColors[8],\n    colorInfoText: infoColors[9],\n    colorInfoTextActive: infoColors[10],\n    colorLinkHover: linkColors[4],\n    colorLink: linkColors[6],\n    colorLinkActive: linkColors[7],\n    colorBgMask: new TinyColor('#000').setAlpha(0.45).toRgbString(),\n    colorWhite: '#fff'\n  });\n}","map":{"version":3,"sources":["C:/Users/david/Downloads/Login_React (Desarrollo)/node_modules/antd/es/theme/themes/shared/genColorMapToken.js"],"names":["TinyColor","genColorMapToken","seed","_ref","generateColorPalettes","generateNeutralColorPalettes","colorSuccess","colorSuccessBase","colorWarning","colorWarningBase","colorError","colorErrorBase","colorInfo","colorInfoBase","colorPrimary","colorPrimaryBase","colorBgBase","colorTextBase","primaryColors","successColors","warningColors","errorColors","infoColors","neutralColors","colorLink","linkColors","Object","assign","colorPrimaryBg","colorPrimaryBgHover","colorPrimaryBorder","colorPrimaryBorderHover","colorPrimaryHover","colorPrimaryActive","colorPrimaryTextHover","colorPrimaryText","colorPrimaryTextActive","colorSuccessBg","colorSuccessBgHover","colorSuccessBorder","colorSuccessBorderHover","colorSuccessHover","colorSuccessActive","colorSuccessTextHover","colorSuccessText","colorSuccessTextActive","colorErrorBg","colorErrorBgHover","colorErrorBgActive","colorErrorBorder","colorErrorBorderHover","colorErrorHover","colorErrorActive","colorErrorTextHover","colorErrorText","colorErrorTextActive","colorWarningBg","colorWarningBgHover","colorWarningBorder","colorWarningBorderHover","colorWarningHover","colorWarningActive","colorWarningTextHover","colorWarningText","colorWarningTextActive","colorInfoBg","colorInfoBgHover","colorInfoBorder","colorInfoBorderHover","colorInfoHover","colorInfoActive","colorInfoTextHover","colorInfoText","colorInfoTextActive","colorLinkHover","colorLinkActive","colorBgMask","setAlpha","toRgbString","colorWhite"],"mappings":"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","sourcesContent":["import { TinyColor } from '@ctrl/tinycolor';\nexport default function genColorMapToken(seed, _ref) {\n  let {\n    generateColorPalettes,\n    generateNeutralColorPalettes\n  } = _ref;\n  const {\n    colorSuccess: colorSuccessBase,\n    colorWarning: colorWarningBase,\n    colorError: colorErrorBase,\n    colorInfo: colorInfoBase,\n    colorPrimary: colorPrimaryBase,\n    colorBgBase,\n    colorTextBase\n  } = seed;\n  const primaryColors = generateColorPalettes(colorPrimaryBase);\n  const successColors = generateColorPalettes(colorSuccessBase);\n  const warningColors = generateColorPalettes(colorWarningBase);\n  const errorColors = generateColorPalettes(colorErrorBase);\n  const infoColors = generateColorPalettes(colorInfoBase);\n  const neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase);\n  // Color Link\n  const colorLink = seed.colorLink || seed.colorInfo;\n  const linkColors = generateColorPalettes(colorLink);\n  return Object.assign(Object.assign({}, neutralColors), {\n    colorPrimaryBg: primaryColors[1],\n    colorPrimaryBgHover: primaryColors[2],\n    colorPrimaryBorder: primaryColors[3],\n    colorPrimaryBorderHover: primaryColors[4],\n    colorPrimaryHover: primaryColors[5],\n    colorPrimary: primaryColors[6],\n    colorPrimaryActive: primaryColors[7],\n    colorPrimaryTextHover: primaryColors[8],\n    colorPrimaryText: primaryColors[9],\n    colorPrimaryTextActive: primaryColors[10],\n    colorSuccessBg: successColors[1],\n    colorSuccessBgHover: successColors[2],\n    colorSuccessBorder: successColors[3],\n    colorSuccessBorderHover: successColors[4],\n    colorSuccessHover: successColors[4],\n    colorSuccess: successColors[6],\n    colorSuccessActive: successColors[7],\n    colorSuccessTextHover: successColors[8],\n    colorSuccessText: successColors[9],\n    colorSuccessTextActive: successColors[10],\n    colorErrorBg: errorColors[1],\n    colorErrorBgHover: errorColors[2],\n    colorErrorBgActive: errorColors[3],\n    colorErrorBorder: errorColors[3],\n    colorErrorBorderHover: errorColors[4],\n    colorErrorHover: errorColors[5],\n    colorError: errorColors[6],\n    colorErrorActive: errorColors[7],\n    colorErrorTextHover: errorColors[8],\n    colorErrorText: errorColors[9],\n    colorErrorTextActive: errorColors[10],\n    colorWarningBg: warningColors[1],\n    colorWarningBgHover: warningColors[2],\n    colorWarningBorder: warningColors[3],\n    colorWarningBorderHover: warningColors[4],\n    colorWarningHover: warningColors[4],\n    colorWarning: warningColors[6],\n    colorWarningActive: warningColors[7],\n    colorWarningTextHover: warningColors[8],\n    colorWarningText: warningColors[9],\n    colorWarningTextActive: warningColors[10],\n    colorInfoBg: infoColors[1],\n    colorInfoBgHover: infoColors[2],\n    colorInfoBorder: infoColors[3],\n    colorInfoBorderHover: infoColors[4],\n    colorInfoHover: infoColors[4],\n    colorInfo: infoColors[6],\n    colorInfoActive: infoColors[7],\n    colorInfoTextHover: infoColors[8],\n    colorInfoText: infoColors[9],\n    colorInfoTextActive: infoColors[10],\n    colorLinkHover: linkColors[4],\n    colorLink: linkColors[6],\n    colorLinkActive: linkColors[7],\n    colorBgMask: new TinyColor('#000').setAlpha(0.45).toRgbString(),\n    colorWhite: '#fff'\n  });\n}"]},"metadata":{},"sourceType":"module"}