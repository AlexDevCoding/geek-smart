{"ast":null,"code":"import * as React from 'react';\nimport { useForm as useRcForm } from 'rc-field-form';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { getFieldId, toArray } from '../util';\n\nfunction toNamePathStr(name) {\n  const namePath = toArray(name);\n  return namePath.join('_');\n}\n\nfunction getFieldDOMNode(name, wrapForm) {\n  const field = wrapForm.getFieldInstance(name);\n\n  if (field instanceof HTMLElement) {\n    return field;\n  }\n\n  if ((field === null || field === void 0 ? void 0 : field.nativeElement) instanceof HTMLElement) {\n    return field.nativeElement;\n  }\n\n  const fieldId = getFieldId(toArray(name), wrapForm.__INTERNAL__.name);\n\n  if (fieldId) {\n    return document.getElementById(fieldId);\n  }\n}\n\nexport default function useForm(form) {\n  const [rcForm] = useRcForm();\n  const itemsRef = React.useRef({});\n  const wrapForm = React.useMemo(() => form !== null && form !== void 0 ? form : Object.assign(Object.assign({}, rcForm), {\n    __INTERNAL__: {\n      itemRef: name => node => {\n        const namePathStr = toNamePathStr(name);\n\n        if (node) {\n          itemsRef.current[namePathStr] = node;\n        } else {\n          delete itemsRef.current[namePathStr];\n        }\n      }\n    },\n    scrollToField: function (name) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const node = getFieldDOMNode(name, wrapForm);\n\n      if (node) {\n        scrollIntoView(node, Object.assign({\n          scrollMode: 'if-needed',\n          block: 'nearest'\n        }, options));\n      }\n    },\n    getFieldInstance: name => {\n      const namePathStr = toNamePathStr(name);\n      return itemsRef.current[namePathStr];\n    }\n  }), [form, rcForm]);\n  return [wrapForm];\n}","map":{"version":3,"sources":["C:/Users/david/Documents/geek-smart-ser/node_modules/antd/es/form/hooks/useForm.js"],"names":["React","useForm","useRcForm","scrollIntoView","getFieldId","toArray","toNamePathStr","name","namePath","join","getFieldDOMNode","wrapForm","field","getFieldInstance","HTMLElement","nativeElement","fieldId","__INTERNAL__","document","getElementById","form","rcForm","itemsRef","useRef","useMemo","Object","assign","itemRef","node","namePathStr","current","scrollToField","options","arguments","length","undefined","scrollMode","block"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,eAArC;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,SAApC;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,QAAMC,QAAQ,GAAGH,OAAO,CAACE,IAAD,CAAxB;AACA,SAAOC,QAAQ,CAACC,IAAT,CAAc,GAAd,CAAP;AACD;;AACD,SAASC,eAAT,CAAyBH,IAAzB,EAA+BI,QAA/B,EAAyC;AACvC,QAAMC,KAAK,GAAGD,QAAQ,CAACE,gBAAT,CAA0BN,IAA1B,CAAd;;AACA,MAAIK,KAAK,YAAYE,WAArB,EAAkC;AAChC,WAAOF,KAAP;AACD;;AACD,MAAI,CAACA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACG,aAArD,aAA+ED,WAAnF,EAAgG;AAC9F,WAAOF,KAAK,CAACG,aAAb;AACD;;AACD,QAAMC,OAAO,GAAGZ,UAAU,CAACC,OAAO,CAACE,IAAD,CAAR,EAAgBI,QAAQ,CAACM,YAAT,CAAsBV,IAAtC,CAA1B;;AACA,MAAIS,OAAJ,EAAa;AACX,WAAOE,QAAQ,CAACC,cAAT,CAAwBH,OAAxB,CAAP;AACD;AACF;;AACD,eAAe,SAASf,OAAT,CAAiBmB,IAAjB,EAAuB;AACpC,QAAM,CAACC,MAAD,IAAWnB,SAAS,EAA1B;AACA,QAAMoB,QAAQ,GAAGtB,KAAK,CAACuB,MAAN,CAAa,EAAb,CAAjB;AACA,QAAMZ,QAAQ,GAAGX,KAAK,CAACwB,OAAN,CAAc,MAAMJ,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0CK,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,MAAlB,CAAd,EAAyC;AACtHJ,IAAAA,YAAY,EAAE;AACZU,MAAAA,OAAO,EAAEpB,IAAI,IAAIqB,IAAI,IAAI;AACvB,cAAMC,WAAW,GAAGvB,aAAa,CAACC,IAAD,CAAjC;;AACA,YAAIqB,IAAJ,EAAU;AACRN,UAAAA,QAAQ,CAACQ,OAAT,CAAiBD,WAAjB,IAAgCD,IAAhC;AACD,SAFD,MAEO;AACL,iBAAON,QAAQ,CAACQ,OAAT,CAAiBD,WAAjB,CAAP;AACD;AACF;AARW,KADwG;AAWtHE,IAAAA,aAAa,EAAE,UAAUxB,IAAV,EAAgB;AAC7B,UAAIyB,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,YAAML,IAAI,GAAGlB,eAAe,CAACH,IAAD,EAAOI,QAAP,CAA5B;;AACA,UAAIiB,IAAJ,EAAU;AACRzB,QAAAA,cAAc,CAACyB,IAAD,EAAOH,MAAM,CAACC,MAAP,CAAc;AACjCU,UAAAA,UAAU,EAAE,WADqB;AAEjCC,UAAAA,KAAK,EAAE;AAF0B,SAAd,EAGlBL,OAHkB,CAAP,CAAd;AAID;AACF,KApBqH;AAqBtHnB,IAAAA,gBAAgB,EAAEN,IAAI,IAAI;AACxB,YAAMsB,WAAW,GAAGvB,aAAa,CAACC,IAAD,CAAjC;AACA,aAAOe,QAAQ,CAACQ,OAAT,CAAiBD,WAAjB,CAAP;AACD;AAxBqH,GAAzC,CAA9D,EAyBb,CAACT,IAAD,EAAOC,MAAP,CAzBa,CAAjB;AA0BA,SAAO,CAACV,QAAD,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { useForm as useRcForm } from 'rc-field-form';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { getFieldId, toArray } from '../util';\nfunction toNamePathStr(name) {\n  const namePath = toArray(name);\n  return namePath.join('_');\n}\nfunction getFieldDOMNode(name, wrapForm) {\n  const field = wrapForm.getFieldInstance(name);\n  if (field instanceof HTMLElement) {\n    return field;\n  }\n  if ((field === null || field === void 0 ? void 0 : field.nativeElement) instanceof HTMLElement) {\n    return field.nativeElement;\n  }\n  const fieldId = getFieldId(toArray(name), wrapForm.__INTERNAL__.name);\n  if (fieldId) {\n    return document.getElementById(fieldId);\n  }\n}\nexport default function useForm(form) {\n  const [rcForm] = useRcForm();\n  const itemsRef = React.useRef({});\n  const wrapForm = React.useMemo(() => form !== null && form !== void 0 ? form : Object.assign(Object.assign({}, rcForm), {\n    __INTERNAL__: {\n      itemRef: name => node => {\n        const namePathStr = toNamePathStr(name);\n        if (node) {\n          itemsRef.current[namePathStr] = node;\n        } else {\n          delete itemsRef.current[namePathStr];\n        }\n      }\n    },\n    scrollToField: function (name) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const node = getFieldDOMNode(name, wrapForm);\n      if (node) {\n        scrollIntoView(node, Object.assign({\n          scrollMode: 'if-needed',\n          block: 'nearest'\n        }, options));\n      }\n    },\n    getFieldInstance: name => {\n      const namePathStr = toNamePathStr(name);\n      return itemsRef.current[namePathStr];\n    }\n  }), [form, rcForm]);\n  return [wrapForm];\n}"]},"metadata":{},"sourceType":"module"}