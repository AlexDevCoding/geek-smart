{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { initZoomMotion } from '../../style/motion';\nimport getArrowStyle, { getArrowOffsetToken, MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { getArrowToken } from '../../style/roundedArrow';\nimport { genPresetColor, genStyleHooks, mergeToken } from '../../theme/internal';\n\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      width: 'max-content',\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      transformOrigin: `var(--arrow-x, 50%) var(--arrow-y, 50%)`,\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: '1em',\n        minHeight: controlHeight,\n        padding: `${unit(token.calc(paddingSM).div(2).equal())} ${unit(paddingXS)}`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary,\n        boxSizing: 'border-box'\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: token.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [`&${componentCls}-${colorKey}`]: {\n          [`${componentCls}-inner`]: {\n            backgroundColor: darkColor\n          },\n          [`${componentCls}-arrow`]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  }, // Arrow Style\n  getArrowStyle(token, 'var(--antd-arrow-background-color)'), // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none',\n      margin: token.sizePopupArrow\n    }\n  }];\n}; // ============================== Export ==============================\n\n\nexport const prepareComponentToken = token => Object.assign(Object.assign({\n  zIndexPopup: token.zIndexPopupBase + 70\n}, getArrowOffsetToken({\n  contentRadius: token.borderRadius,\n  limitVerticalRadius: true\n})), getArrowToken(mergeToken(token, {\n  borderRadiusOuter: Math.min(token.borderRadiusOuter, 4)\n})));\nexport default (function (prefixCls) {\n  let injectStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const useStyle = genStyleHooks('Tooltip', token => {\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgSpotlight\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgSpotlight\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, prepareComponentToken, {\n    resetStyle: false,\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    injectStyle\n  });\n  return useStyle(prefixCls);\n});","map":{"version":3,"sources":["C:/Users/david/Downloads/Login_React (Desarrollo)/Login_React/login_react/node_modules/antd/es/tooltip/style/index.js"],"names":["unit","resetComponent","initZoomMotion","getArrowStyle","getArrowOffsetToken","MAX_VERTICAL_CONTENT_RADIUS","getArrowToken","genPresetColor","genStyleHooks","mergeToken","genTooltipStyle","token","componentCls","tooltipMaxWidth","tooltipColor","tooltipBg","tooltipBorderRadius","zIndexPopup","controlHeight","boxShadowSecondary","paddingSM","paddingXS","Object","assign","position","zIndex","display","width","maxWidth","visibility","transformOrigin","minWidth","minHeight","padding","calc","div","equal","color","textAlign","textDecoration","wordWrap","backgroundColor","borderRadius","boxShadow","boxSizing","join","min","colorKey","_ref","darkColor","direction","margin","sizePopupArrow","prepareComponentToken","zIndexPopupBase","contentRadius","limitVerticalRadius","borderRadiusOuter","Math","prefixCls","injectStyle","arguments","length","undefined","useStyle","colorTextLightSolid","colorBgSpotlight","TooltipToken","resetStyle"],"mappings":"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","sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { initZoomMotion } from '../../style/motion';\nimport getArrowStyle, { getArrowOffsetToken, MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { getArrowToken } from '../../style/roundedArrow';\nimport { genPresetColor, genStyleHooks, mergeToken } from '../../theme/internal';\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      width: 'max-content',\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      transformOrigin: `var(--arrow-x, 50%) var(--arrow-y, 50%)`,\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: '1em',\n        minHeight: controlHeight,\n        padding: `${unit(token.calc(paddingSM).div(2).equal())} ${unit(paddingXS)}`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary,\n        boxSizing: 'border-box'\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: token.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [`&${componentCls}-${colorKey}`]: {\n          [`${componentCls}-inner`]: {\n            backgroundColor: darkColor\n          },\n          [`${componentCls}-arrow`]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  },\n  // Arrow Style\n  getArrowStyle(token, 'var(--antd-arrow-background-color)'),\n  // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none',\n      margin: token.sizePopupArrow\n    }\n  }];\n};\n// ============================== Export ==============================\nexport const prepareComponentToken = token => Object.assign(Object.assign({\n  zIndexPopup: token.zIndexPopupBase + 70\n}, getArrowOffsetToken({\n  contentRadius: token.borderRadius,\n  limitVerticalRadius: true\n})), getArrowToken(mergeToken(token, {\n  borderRadiusOuter: Math.min(token.borderRadiusOuter, 4)\n})));\nexport default (function (prefixCls) {\n  let injectStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const useStyle = genStyleHooks('Tooltip', token => {\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgSpotlight\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgSpotlight\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, prepareComponentToken, {\n    resetStyle: false,\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    injectStyle\n  });\n  return useStyle(prefixCls);\n});"]},"metadata":{},"sourceType":"module"}