{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport { generateColor } from '../util';\nconst INIT_COLOR_REF = {};\n\nfunction hasValue(value) {\n  return value !== undefined;\n}\n\nconst useColorState = (defaultStateValue, option) => {\n  const {\n    defaultValue,\n    value\n  } = option;\n  const prevColor = useRef(generateColor(''));\n  const [colorValue, _setColorValue] = useState(() => {\n    let mergedState;\n\n    if (hasValue(value)) {\n      mergedState = value;\n    } else if (hasValue(defaultValue)) {\n      mergedState = defaultValue;\n    } else {\n      mergedState = defaultStateValue;\n    }\n\n    const color = generateColor(mergedState || '');\n    prevColor.current = color;\n    return color;\n  });\n\n  const setColorValue = color => {\n    _setColorValue(color);\n\n    prevColor.current = color;\n  };\n\n  const prevValue = useRef(INIT_COLOR_REF);\n  useEffect(() => {\n    // `useEffect` will be executed twice in strict mode even if the deps are the same\n    // So we compare the value manually to avoid unnecessary update\n    if (prevValue.current === value) {\n      return;\n    }\n\n    prevValue.current = value;\n    const newColor = generateColor(hasValue(value) ? value || '' : prevColor.current);\n\n    if (prevColor.current.cleared === true) {\n      newColor.cleared = 'controlled';\n    }\n\n    setColorValue(newColor);\n  }, [value]);\n  return [colorValue, setColorValue, prevColor];\n};\n\nexport default useColorState;","map":{"version":3,"sources":["C:/Users/david/Downloads/Login_React (Desarrollo)/Login_React/login_react/node_modules/antd/es/color-picker/hooks/useColorState.js"],"names":["useEffect","useRef","useState","generateColor","INIT_COLOR_REF","hasValue","value","undefined","useColorState","defaultStateValue","option","defaultValue","prevColor","colorValue","_setColorValue","mergedState","color","current","setColorValue","prevValue","newColor","cleared"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,MAAMC,cAAc,GAAG,EAAvB;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAOA,KAAK,KAAKC,SAAjB;AACD;;AACD,MAAMC,aAAa,GAAG,CAACC,iBAAD,EAAoBC,MAApB,KAA+B;AACnD,QAAM;AACJC,IAAAA,YADI;AAEJL,IAAAA;AAFI,MAGFI,MAHJ;AAIA,QAAME,SAAS,GAAGX,MAAM,CAACE,aAAa,CAAC,EAAD,CAAd,CAAxB;AACA,QAAM,CAACU,UAAD,EAAaC,cAAb,IAA+BZ,QAAQ,CAAC,MAAM;AAClD,QAAIa,WAAJ;;AACA,QAAIV,QAAQ,CAACC,KAAD,CAAZ,EAAqB;AACnBS,MAAAA,WAAW,GAAGT,KAAd;AACD,KAFD,MAEO,IAAID,QAAQ,CAACM,YAAD,CAAZ,EAA4B;AACjCI,MAAAA,WAAW,GAAGJ,YAAd;AACD,KAFM,MAEA;AACLI,MAAAA,WAAW,GAAGN,iBAAd;AACD;;AACD,UAAMO,KAAK,GAAGb,aAAa,CAACY,WAAW,IAAI,EAAhB,CAA3B;AACAH,IAAAA,SAAS,CAACK,OAAV,GAAoBD,KAApB;AACA,WAAOA,KAAP;AACD,GAZ4C,CAA7C;;AAaA,QAAME,aAAa,GAAGF,KAAK,IAAI;AAC7BF,IAAAA,cAAc,CAACE,KAAD,CAAd;;AACAJ,IAAAA,SAAS,CAACK,OAAV,GAAoBD,KAApB;AACD,GAHD;;AAIA,QAAMG,SAAS,GAAGlB,MAAM,CAACG,cAAD,CAAxB;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,QAAImB,SAAS,CAACF,OAAV,KAAsBX,KAA1B,EAAiC;AAC/B;AACD;;AACDa,IAAAA,SAAS,CAACF,OAAV,GAAoBX,KAApB;AACA,UAAMc,QAAQ,GAAGjB,aAAa,CAACE,QAAQ,CAACC,KAAD,CAAR,GAAkBA,KAAK,IAAI,EAA3B,GAAgCM,SAAS,CAACK,OAA3C,CAA9B;;AACA,QAAIL,SAAS,CAACK,OAAV,CAAkBI,OAAlB,KAA8B,IAAlC,EAAwC;AACtCD,MAAAA,QAAQ,CAACC,OAAT,GAAmB,YAAnB;AACD;;AACDH,IAAAA,aAAa,CAACE,QAAD,CAAb;AACD,GAZQ,EAYN,CAACd,KAAD,CAZM,CAAT;AAaA,SAAO,CAACO,UAAD,EAAaK,aAAb,EAA4BN,SAA5B,CAAP;AACD,CAtCD;;AAuCA,eAAeJ,aAAf","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { generateColor } from '../util';\nconst INIT_COLOR_REF = {};\nfunction hasValue(value) {\n  return value !== undefined;\n}\nconst useColorState = (defaultStateValue, option) => {\n  const {\n    defaultValue,\n    value\n  } = option;\n  const prevColor = useRef(generateColor(''));\n  const [colorValue, _setColorValue] = useState(() => {\n    let mergedState;\n    if (hasValue(value)) {\n      mergedState = value;\n    } else if (hasValue(defaultValue)) {\n      mergedState = defaultValue;\n    } else {\n      mergedState = defaultStateValue;\n    }\n    const color = generateColor(mergedState || '');\n    prevColor.current = color;\n    return color;\n  });\n  const setColorValue = color => {\n    _setColorValue(color);\n    prevColor.current = color;\n  };\n  const prevValue = useRef(INIT_COLOR_REF);\n  useEffect(() => {\n    // `useEffect` will be executed twice in strict mode even if the deps are the same\n    // So we compare the value manually to avoid unnecessary update\n    if (prevValue.current === value) {\n      return;\n    }\n    prevValue.current = value;\n    const newColor = generateColor(hasValue(value) ? value || '' : prevColor.current);\n    if (prevColor.current.cleared === true) {\n      newColor.cleared = 'controlled';\n    }\n    setColorValue(newColor);\n  }, [value]);\n  return [colorValue, setColorValue, prevColor];\n};\nexport default useColorState;"]},"metadata":{},"sourceType":"module"}