{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport CheckOutlined from \"@ant-design/icons/es/icons/CheckOutlined\";\nimport CopyOutlined from \"@ant-design/icons/es/icons/CopyOutlined\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport TransButton from '../../_util/transButton';\nimport Tooltip from '../../tooltip';\nimport { getNode, toList } from './util';\n\nconst CopyBtn = props => {\n  const {\n    prefixCls,\n    copied,\n    locale,\n    iconOnly,\n    tooltips,\n    icon,\n    loading: btnLoading,\n    tabIndex,\n    onCopy\n  } = props;\n  const tooltipNodes = toList(tooltips);\n  const iconNodes = toList(icon);\n  const {\n    copied: copiedText,\n    copy: copyText\n  } = locale !== null && locale !== void 0 ? locale : {};\n  const copyTitle = copied ? getNode(tooltipNodes[1], copiedText) : getNode(tooltipNodes[0], copyText);\n  const systemStr = copied ? copiedText : copyText;\n  const ariaLabel = typeof copyTitle === 'string' ? copyTitle : systemStr;\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    key: \"copy\",\n    title: copyTitle\n  }, /*#__PURE__*/React.createElement(TransButton, {\n    className: classNames(`${prefixCls}-copy`, {\n      [`${prefixCls}-copy-success`]: copied,\n      [`${prefixCls}-copy-icon-only`]: iconOnly\n    }),\n    onClick: onCopy,\n    \"aria-label\": ariaLabel,\n    tabIndex: tabIndex\n  }, copied ? getNode(iconNodes[1], /*#__PURE__*/React.createElement(CheckOutlined, null), true) : getNode(iconNodes[0], btnLoading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : /*#__PURE__*/React.createElement(CopyOutlined, null), true)));\n};\n\nexport default CopyBtn;","map":{"version":3,"sources":["C:/Users/david/Documents/GitHub/geek-smart/node_modules/antd/es/typography/Base/CopyBtn.js"],"names":["React","CheckOutlined","CopyOutlined","LoadingOutlined","classNames","TransButton","Tooltip","getNode","toList","CopyBtn","props","prefixCls","copied","locale","iconOnly","tooltips","icon","loading","btnLoading","tabIndex","onCopy","tooltipNodes","iconNodes","copiedText","copy","copyText","copyTitle","systemStr","ariaLabel","createElement","key","title","className","onClick"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,OAAOC,eAAP,MAA4B,4CAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,QAAhC;;AACA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AACvB,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,IANI;AAOJC,IAAAA,OAAO,EAAEC,UAPL;AAQJC,IAAAA,QARI;AASJC,IAAAA;AATI,MAUFV,KAVJ;AAWA,QAAMW,YAAY,GAAGb,MAAM,CAACO,QAAD,CAA3B;AACA,QAAMO,SAAS,GAAGd,MAAM,CAACQ,IAAD,CAAxB;AACA,QAAM;AACJJ,IAAAA,MAAM,EAAEW,UADJ;AAEJC,IAAAA,IAAI,EAAEC;AAFF,MAGFZ,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgD,EAHpD;AAIA,QAAMa,SAAS,GAAGd,MAAM,GAAGL,OAAO,CAACc,YAAY,CAAC,CAAD,CAAb,EAAkBE,UAAlB,CAAV,GAA0ChB,OAAO,CAACc,YAAY,CAAC,CAAD,CAAb,EAAkBI,QAAlB,CAAzE;AACA,QAAME,SAAS,GAAGf,MAAM,GAAGW,UAAH,GAAgBE,QAAxC;AACA,QAAMG,SAAS,GAAG,OAAOF,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4CC,SAA9D;AACA,SAAO,aAAa3B,KAAK,CAAC6B,aAAN,CAAoBvB,OAApB,EAA6B;AAC/CwB,IAAAA,GAAG,EAAE,MAD0C;AAE/CC,IAAAA,KAAK,EAAEL;AAFwC,GAA7B,EAGjB,aAAa1B,KAAK,CAAC6B,aAAN,CAAoBxB,WAApB,EAAiC;AAC/C2B,IAAAA,SAAS,EAAE5B,UAAU,CAAE,GAAEO,SAAU,OAAd,EAAsB;AACzC,OAAE,GAAEA,SAAU,eAAd,GAA+BC,MADU;AAEzC,OAAE,GAAED,SAAU,iBAAd,GAAiCG;AAFQ,KAAtB,CAD0B;AAK/CmB,IAAAA,OAAO,EAAEb,MALsC;AAM/C,kBAAcQ,SANiC;AAO/CT,IAAAA,QAAQ,EAAEA;AAPqC,GAAjC,EAQbP,MAAM,GAAGL,OAAO,CAACe,SAAS,CAAC,CAAD,CAAV,EAAe,aAAatB,KAAK,CAAC6B,aAAN,CAAoB5B,aAApB,EAAmC,IAAnC,CAA5B,EAAsE,IAAtE,CAAV,GAAwFM,OAAO,CAACe,SAAS,CAAC,CAAD,CAAV,EAAeJ,UAAU,GAAG,aAAalB,KAAK,CAAC6B,aAAN,CAAoB1B,eAApB,EAAqC,IAArC,CAAhB,GAA6D,aAAaH,KAAK,CAAC6B,aAAN,CAAoB3B,YAApB,EAAkC,IAAlC,CAAnG,EAA4I,IAA5I,CARxF,CAHI,CAApB;AAYD,CAjCD;;AAkCA,eAAeO,OAAf","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport CheckOutlined from \"@ant-design/icons/es/icons/CheckOutlined\";\nimport CopyOutlined from \"@ant-design/icons/es/icons/CopyOutlined\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport TransButton from '../../_util/transButton';\nimport Tooltip from '../../tooltip';\nimport { getNode, toList } from './util';\nconst CopyBtn = props => {\n  const {\n    prefixCls,\n    copied,\n    locale,\n    iconOnly,\n    tooltips,\n    icon,\n    loading: btnLoading,\n    tabIndex,\n    onCopy\n  } = props;\n  const tooltipNodes = toList(tooltips);\n  const iconNodes = toList(icon);\n  const {\n    copied: copiedText,\n    copy: copyText\n  } = locale !== null && locale !== void 0 ? locale : {};\n  const copyTitle = copied ? getNode(tooltipNodes[1], copiedText) : getNode(tooltipNodes[0], copyText);\n  const systemStr = copied ? copiedText : copyText;\n  const ariaLabel = typeof copyTitle === 'string' ? copyTitle : systemStr;\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    key: \"copy\",\n    title: copyTitle\n  }, /*#__PURE__*/React.createElement(TransButton, {\n    className: classNames(`${prefixCls}-copy`, {\n      [`${prefixCls}-copy-success`]: copied,\n      [`${prefixCls}-copy-icon-only`]: iconOnly\n    }),\n    onClick: onCopy,\n    \"aria-label\": ariaLabel,\n    tabIndex: tabIndex\n  }, copied ? getNode(iconNodes[1], /*#__PURE__*/React.createElement(CheckOutlined, null), true) : getNode(iconNodes[0], btnLoading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : /*#__PURE__*/React.createElement(CopyOutlined, null), true)));\n};\nexport default CopyBtn;"]},"metadata":{},"sourceType":"module"}